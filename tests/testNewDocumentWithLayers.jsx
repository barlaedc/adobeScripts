#target "indesign"#includepath "../../Extendables;../uiObjects;../jsObjects;../JavaScripts"#include "Extendables.jsx"#include "createDocumentWH.jsx"extract ("testing")describe ('Create New Document With layers suite', function (){	beforeEach( function () 	{	})		afterEach ( function ()	{		try		{			app.documents.everyItem().close ( SaveOptions.NO);		}		catch (e)		{}	})		it (' call object creation', function ()	{		try		{			var createDocument = new CreateDocument ();			expect (typeof (createDocument)).toEqual("object");		}		catch (e)		{            expect("try").toEqual(e.toString());		}	})    it (' check getNumPages default', function ()    {        try        {            var createDocument = new CreateDocument ();            expect(createDocument.getNumPages()).toEqual(0);        }        catch (e)        {            expect("try").toEqual(e.toString());        }    });        it ( 'call setNumPages', function ()    {    	try    	{    		var createDocument = new CreateDocument ();			createDocument.setNumPages (10);			expect(createDocument.getNumPages()).toEqual(10);    	}    	catch (e)    	{    		expect('try').toBe(e.toString());	    	}    })        it ('check getAddTextFrames default', function ()    {    	try    	{    		var createDocument = new CreateDocument();    		expect(createDocument.getAddTextFrames()).toEqual(false);    	}    	catch(e)    	{    		expect("try").toEqual(e.toString());    	}    })        it ( 'call setAddTextFrames (true)', function ()    {    	try    	{    		var createDocument = new CreateDocument();    		createDocument.setAddTextFrames( true);    		expect(createDocument.getAddTextFrames()).toEqual(true);	    	}    	catch (e)    	{    		expect("try").toEqual(e.toString());   		}    })        it ( 'call setAddTextFrames ( false)', function ()    {    	try    	{    		var createDocument = new CreateDocument();    		createDocument.setAddTextFrames ( false);    		expect ( createDocument.getAddTextFrames()).toEqual(false);    	}    	catch (e)    	{    		expect("try").toEqual (e.toString());    	}    })        it ( 'call getNewBound with 0', function ()    {    	try    	{    		var createDocument = new CreateDocument();    		var retArray = createDocument.getNewBounds(0);    		expect(retArray.length).toEqual(4);    		expect(retArray[0]).toEqual(10);    		expect(retArray[1]).toEqual(10);    		expect(retArray[2]).toEqual(15);    		expect(retArray[3]).toEqual(25);    	}		catch(e)		{			expect("try").toEqual(e.toString());    	}    })            it ( 'call getNewBound with 1', function ()    {    	try    	{    		var createDocument = new CreateDocument();    		var retArray = createDocument.getNewBounds(1);    		expect(retArray.length).toEqual(4);    		expect(retArray[0]).toEqual(20);    		expect(retArray[1]).toEqual(10);    		expect(retArray[2]).toEqual(30);    		expect(retArray[3]).toEqual(25);    	}		catch(e)		{			expect("try").toEqual(e.toString());    	}    })            it ( 'call getNewBound with 10', function ()    {    	try    	{    		var createDocument = new CreateDocument();    		var retArray = createDocument.getNewBounds(10);    		expect(retArray.length).toEqual(4);    		expect(retArray[0]).toEqual(110);    		expect(retArray[1]).toEqual(10);    		expect(retArray[2]).toEqual(165);    		expect(retArray[3]).toEqual(25);    	}		catch(e)		{			expect("try").toEqual(e.toString());    	}    })})if ( app.name === "ExtendScript Toolkit"){        app.clc();}else{    var estApp =  BridgeTalk.getSpecifier("estoolkit");    if ( estApp)    {        var bt = new BridgeTalk;        bt.target = estApp;        bt.body = "app.clc();";        bt.send ();    }}if ( $.level === 0 ){    tests.to_html ("tests.testNewDocumentWithLayers.html");}else{    tests.to_console ();}